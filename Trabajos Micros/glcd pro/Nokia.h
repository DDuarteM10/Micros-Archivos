#include "stm32f4xx.h"







static const char ASCII[][5] =
{
 {0x00, 0x00, 0x00, 0x00, 0x00} // 20  
,{0x80, 0x00, 0x00, 0x00, 0x00} // 21 !
,{0x40, 0x00, 0x00, 0x00, 0x00} // 22 "
,{0x20, 0x00, 0x00, 0x00, 0x00} // 23 #
,{0x10, 0x00, 0x00, 0x00, 0x00} // 24 $
,{0x08, 0x00, 0x00, 0x00, 0x00} // 25 %
,{0x04, 0x00, 0x00, 0x00, 0x00} // 26 &
,{0x02, 0x00, 0x00, 0x00, 0x00} // 27 '
,{0x01, 0x00, 0x00, 0x00, 0x00} // 28 (
,{0x40, 0x00, 0x00, 0x00, 0x00} // 29 )
,{0x02, 0x00, 0x00, 0x00, 0x00} // 2a *
,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c ¥
,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j 
,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
,{0x00, 0x00, 0xFF, 0x00, 0x00} // 7c |
,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ?
,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f ?
};

void Nokia_5110 (char contraste);
void reset(bool e);
void TxSPI(unsigned char d);
void Escribir_nokia_0(bool e, short X, short Y, char str[], bool c);
void nokia_pos(short Ypos, short Xpos);
void SepararDatos(int valor, float valorf,int menu,int x, int y);


B00110000,B01111000,B11001100,B11001100,B11111100,B11001100,B11001100,B00000000,25, // A
B11111100,B01100110,B01100110,B01111100,B01100110,B01100110,B11111100,B00000000,25, // B
B00111100,B01100110,B11000000,B11000000,B11000000,B01100110,B00111100,B00000000,25, // C
B11111000,B01101100,B01100110,B01100110,B01100110,B01101100,B11111000,B00000000,25, // D
B11111110,B01100010,B01101000,B01111000,B01101000,B01100010,B11111110,B00000000,25, // E
B11111110,B01100010,B01101000,B01111000,B01101000,B01100000,B11110000,B00000000,25, // F
B00111100,B01100110,B11000000,B11000000,B11001110,B01100110,B00111110,B00000000,25, // G
B11001100,B11001100,B11001100,B11111100,B11001100,B11001100,B11001100,B00000000,25, // H
B01111000,B00110000,B00110000,B00110000,B00110000,B00110000,B01111000,B00000000,25, // I
B00011110,B00001100,B00001100,B00001100,B11001100,B11001100,B01111000,B00000000,25, // J
B11110110,B01100110,B01101100,B01111000,B01101100,B01100110,B11110110,B00000000,25, // K
B11110000,B01100000,B01100000,B01100000,B01100010,B01100110,B11111110,B00000000,25, // L
B11000110,B11101110,B11111110,B11111110,B11010110,B11000110,B11000110,B00000000,25, // M
B11000110,B11100110,B11110110,B11011110,B11001110,B11000110,B11000110,B00000000,25, // N
B00111000,B01101100,B11000110,B11000110,B11000110,B01101100,B00111000,B00000000,25, // O
B11111100,B01100110,B01100110,B01111100,B01100000,B01100000,B11110000,B00000000,25, // P
B01111000,B11001100,B11001100,B11001100,B11011100,B01111000,B00011100,B00000000,25, // Q
B11111100,B01100110,B01100110,B01111100,B01101100,B01100110,B11110110,B00000000,25, // R
B01111000,B11001100,B11100000,B01110000,B00011100,B11001100,B01111000,B00000000,25, // S
B11111100,B10110100,B00110000,B00110000,B00110000,B00110000,B01111000,B00000000,25, // T
B11001100,B11001100,B11001100,B11001100,B11001100,B11001100,B11111100,B00000000,25, // U
B11001100,B11001100,B11001100,B11001100,B11001100,B01111000,B00110000,B00000000,25, // V
B11000110,B11000110,B11000110,B11010110,B11111110,B11101110,B11000110,B00000000,25, // W
B11000110,B11000110,B01101100,B00111000,B00111000,B01101100,B11000110,B00000000,25, // X
B11001100,B11001100,B11001100,B01111000,B00110000,B00110000,B01111000,B00000000,25, // Y
B11111110,B11000110,B10001100,B00011000,B00110010,B01100110,B11111110,B00000000,25, // Z

B00000000,B00000000,B01111000,B00001100,B01111100,B11001100,B01110110,B00000000,25, // a
B11100000,B01100000,B01100000,B01111100,B01100110,B01100110,B11011100,B00000000,25, // b
B00000000,B00000000,B01111000,B11001100,B11000000,B11001100,B01111000,B00000000,25, // c
B00011100,B00001100,B00001100,B01111100,B11001100,B11001100,B01110110,B00000000,25, // d
B00000000,B00000000,B01111000,B11001100,B11111100,B11000000,B01111000,B00000000,25, // e
B00111000,B01101100,B01100000,B11110000,B01100000,B01100000,B11110000,B00000000,25, // f
B00000000,B00000000,B01110110,B11001100,B11001100,B01111100,B00001100,B11111000,25, // g
B11100000,B01100000,B01101100,B01110110,B01100110,B01100110,B11100110,B00000000,25, // h
B00110000,B00000000,B01110000,B00110000,B00110000,B00110000,B01111000,B00000000,25, // i
B00001100,B00000000,B00001100,B00001100,B00001100,B11001100,B11001100,B01111000,25, // j
B11100000,B01100000,B01100110,B01101100,B01111000,B01101100,B11100110,B00000000,25, // k
B01110000,B00110000,B00110000,B00110000,B00110000,B00110000,B01111000,B00000000,25, // l
B00000000,B00000000,B11001100,B11111110,B11111110,B11010110,B11000110,B00000000,25, // m
B00000000,B00000000,B11111000,B11001100,B11001100,B11001100,B11001100,B00000000,25, // n
B00000000,B00000000,B01111000,B11001100,B11001100,B11001100,B01111000,B00000000,25, // o
B00000000,B00000000,B11011100,B01100110,B01100110,B01111100,B01100000,B11110000,25, // p
B00000000,B00000000,B01110110,B11001100,B11001100,B01111100,B00001100,B00011110,25, // q
B00000000,B00000000,B10011100,B01110110,B01100110,B01100000,B11110000,B00000000,25, // r
B00000000,B00000000,B01111100,B11000000,B01111000,B00001100,B11111000,B00000000,25, // s
B00010000,B00110000,B01111100,B00110000,B00110000,B00110100,B00011000,B00000000,25, // t
B00000000,B00000000,B11001100,B11001100,B11001100,B11001100,B01110110,B00000000,25, // u
B00000000,B00000000,B11001100,B11001100,B11001100,B01111000,B00110000,B00000000,25, // v
B00000000,B00000000,B11000110,B11000110,B11010110,B11111110,B01101100,B00000000,25, // w
B00000000,B00000000,B11000110,B01101100,B00111000,B01101100,B11000110,B00000000,25, // x
B00000000,B00000000,B11001100,B11001100,B11001100,B01111100,B00001100,B11111000,25, // y
B00000000,B00000000,B11111100,B10011000,B00110000,B01100100,B11111100,B00000000,25, // z

B01111000,B11001100,B11011100,B11111100,B11101100,B11001100,B01111100,B00000000,25, // 0
B00110000,B01110000,B00110000,B00110000,B00110000,B00110000,B11111100,B00000000,25, // 1
B01111000,B11001100,B00001100,B00111000,B01100000,B11001100,B11111100,B00000000,25, // 2
B01111000,B11001100,B00001100,B00111000,B00001100,B11001100,B01111000,B00000000,25, // 3
B00011100,B00111100,B01101100,B11001100,B11111110,B00001100,B00011110,B00000000,25, // 4
B11111100,B11000000,B11111000,B00001100,B00001100,B11001100,B01111000,B00000000,25, // 5
B00111000,B01100000,B11000000,B11111000,B11001100,B11001100,B01111000,B00000000,25, // 6
B11111100,B11001100,B00001100,B00011000,B00110000,B00110000,B00110000,B00000000,25, // 7
B01111000,B11001100,B11001100,B01111000,B11001100,B11001100,B01111000,B00000000,25, // 8
B01111000,B11001100,B11001100,B01111100,B00001100,B00011000,B01110000,B00000000,25, // 9

B00110000,B01111000,B01111000,B00110000,B00110000,B00000000,B00110000,B00000000,25, // !
B01101100,B01101100,B11111110,B01101100,B11111110,B01101100,B01101100,B00000000,25, // #
B00110000,B01111100,B11000000,B01111000,B00001100,B11111000,B00110000,B00000000,25, // $
B00000000,B11000110,B11001100,B00011000,B00110000,B01100110,B11000110,B00000000,25, // %
B00111000,B01101100,B00111000,B01110110,B11011100,B11001100,B01110110,B00000000,25, // &
B01111000,B11001100,B00001100,B00011000,B00110000,B00000000,B00110000,B00000000,25, // ?

const char NUM[10][8] ={ 0x00,0x00,0x7C,0x92,0x8A,0x86,0x7C,0x00, //0
																0x00,0x00,0x08,0x04,0xFE,0x00,0x00,0x00, //1
																0x00,0x00,0x84,0xC2,0xA2,0x92,0x8C,0x00, //2
																0x00,0x00,0x44,0x82,0x92,0x92,0x6C,0x00, //3
																0x00,0x00,0x30,0x28,0x24,0xFE,0x20,0x00, //4
																0x00,0x00,0x4E,0x8A,0x8A,0x8A,0x72,0x00, //5     //Vectores para los numeros de la variable de 8 bits 
																0x00,0x00,0x7C,0x92,0x92,0x92,0x64,0x00, //6
																0x00,0x00,0x02,0x0E2,0x12,0X0A,0x06,0x00, //7
																0x00,0x00,0x6C,0x92,0x92,0x92,0x6C,0x00, //8
																0x00,0x00,0x4C,0x92,0x92,0x92,0x7C,0X00};//9

																
const char LA[8] = {0x00,0x00,0xFC,0x22,0x22,0x22,0xFC,0x00};
const char LB[8] = {0x00,0x00,0xFE,0x92,0x92,0x92,0x6C,0x00};
const char LC[8] = {0x00,0x00,0x7C,0x82,0x82,0x82,0x44,0x00};
const char LD[8] = {0x00,0x00,0xFE,0x82,0x82,0x44,0x38,0x00};
const char LE[8] = {0x00,0x00,0xFE,0x92,0x92,0x82,0x82,0x00};
const char LF[8] = {0x00,0x00,0xFE,0x12,0x12,0x02,0x02,0x00};
const char LG[8] = {0x00,0x00,0x7C,0x82,0xB2,0x92,0x74,0x00};
const char LH[8] = {0x00,0x00,0xFE,0x10,0x10,0x10,0xFE,0x00};
const char LI[8] = {0x00,0x00,0x82,0xFE,0x82,0x00,0x00,0x00};
const char LJ[8] = {0x00,0x00,0x40,0x82,0x7E,0x02,0x00,0x00};
const char LK[8] = {0x00,0x00,0xFE,0x10,0x10,0x28,0xC6,0x00};
const char LL[8] = {0x00,0xff,0x80,0x80,0x80,0x80,0x00,0x00};
const char LM[8] = {0x00,0x00,0xFE,0x04,0x08,0x04,0xFE,0x00};
const char LN[8] = {0x00,0x00,0xFE,0X10,0x20,0x40,0xFE,0x00};
const char LO[8] = {0x00,0x00,0x7C,0x82,0x82,0x82,0x7C,0x00};
const char LP[8] = {0x00,0x00,0xFE,0x12,0x12,0x12,0x0C,0x00};
const char LQ[8] = {0x00,0x00,0x7C,0x82,0xA2,0x42,0xBC,0x00};
const char LR[8] = {0x00,0x00,0xFE,0x12,0x12,0x12,0xEC,0x00};
const char LS[8] = {0x00,0x00,0x8C,0x92,0x92,0x92,0x62,0x00};
const char LT[8] = {0x00,0x00,0x02,0x02,0xFE,0x02,0x02,0x00};
const char LU[8] = {0x00,0x00,0x7E,0x80,0x80,0x80,0x7E,0x00};
const char LV[8] = {0x00,0x00,0x3E,0x40,0x80,0x40,0x3E,0x00};
const char LW[8] = {0x00,0x00,0xFE,0x40,0x38,0x40,0xFE,0x00};
const char LX[8] = {0x00,0x00,0xC6,0x28,0x10,0x28,0xC6,0x00};
const char LY[8] = {0x00,0x00,0x06,0x08,0xF0,0x08,0x06,0x00};
const char LZ[8] = {0x00,0x00,0xC2,0xA2,0x92,0x8A,0x86,0x00};